/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ApiNetworkInformation } from '../models';
import { ApiNetworkClock } from '../models';
import { ApiNetworkParameters } from '../models';
/**
 * NetworkApi - axios parameter creator
 * @export
 */
export declare const NetworkApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Clock
     * @param {boolean} [forceNtpCheck] NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkClock: (forceNtpCheck?: boolean, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkInformation: (options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Returns the set of network parameters for the current epoch.
     * @summary Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkParameters: (options?: any) => Promise<RequestArgs>;
};
/**
 * NetworkApi - functional programming interface
 * @export
 */
export declare const NetworkApiFp: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Clock
     * @param {boolean} [forceNtpCheck] NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkClock(forceNtpCheck?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNetworkClock>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkInformation(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNetworkInformation>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Returns the set of network parameters for the current epoch.
     * @summary Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkParameters(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiNetworkParameters>>;
};
/**
 * NetworkApi - factory interface
 * @export
 */
export declare const NetworkApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Clock
     * @param {boolean} [forceNtpCheck] NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkClock(forceNtpCheck?: boolean, options?: any): AxiosPromise<ApiNetworkClock>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkInformation(options?: any): AxiosPromise<ApiNetworkInformation>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Returns the set of network parameters for the current epoch.
     * @summary Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNetworkParameters(options?: any): AxiosPromise<ApiNetworkParameters>;
};
/**
 * NetworkApi - object-oriented interface
 * @export
 * @class NetworkApi
 * @extends {BaseAPI}
 */
export declare class NetworkApi extends BaseAPI {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Clock
     * @param {boolean} [forceNtpCheck] NTP checks are cached for short duration to avoid sending too many queries to the central NTP servers. In some cases however, a client may want to force a new check.  When this flag is set, the request **will block** until NTP server responds or will timeout after a while without any answer from the NTP server.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    getNetworkClock(forceNtpCheck?: boolean, options?: any): Promise<import("axios").AxiosResponse<ApiNetworkClock>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    getNetworkInformation(options?: any): Promise<import("axios").AxiosResponse<ApiNetworkInformation>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Returns the set of network parameters for the current epoch.
     * @summary Parameters
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NetworkApi
     */
    getNetworkParameters(options?: any): Promise<import("axios").AxiosResponse<ApiNetworkParameters>>;
}
