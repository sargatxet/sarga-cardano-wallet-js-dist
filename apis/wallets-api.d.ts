/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ApiWalletPostData } from '../models';
import { ApiWalletPutData } from '../models';
import { ApiWalletPutPassphraseData } from '../models';
import { ApiWallet } from '../models';
import { ApiWalletUTxOsStatistics } from '../models';
/**
 * WalletsApi - axios parameter creator
 * @export
 */
export declare const WalletsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Delete
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWallet: (walletId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
     * @summary UTxO Statistics
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUTxOsStatistics: (walletId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Get
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet: (walletId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets: (options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
     * @summary Create / Restore
     * @param {ApiWalletPostData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWallet: (body: ApiWalletPostData, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Metadata
     * @param {ApiWalletPutData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWallet: (body: ApiWalletPutData, walletId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Passphrase
     * @param {ApiWalletPutPassphraseData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWalletPassphrase: (body: ApiWalletPutPassphraseData, walletId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * WalletsApi - functional programming interface
 * @export
 */
export declare const WalletsApiFp: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Delete
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWallet(walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
     * @summary UTxO Statistics
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUTxOsStatistics(walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWalletUTxOsStatistics>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Get
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiWallet>>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
     * @summary Create / Restore
     * @param {ApiWalletPostData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWallet(body: ApiWalletPostData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Metadata
     * @param {ApiWalletPutData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWallet(body: ApiWalletPutData, walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Passphrase
     * @param {ApiWalletPutPassphraseData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWalletPassphrase(body: ApiWalletPutPassphraseData, walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * WalletsApi - factory interface
 * @export
 */
export declare const WalletsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Delete
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteWallet(walletId: string, options?: any): AxiosPromise<void>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
     * @summary UTxO Statistics
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUTxOsStatistics(walletId: string, options?: any): AxiosPromise<ApiWalletUTxOsStatistics>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Get
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getWallet(walletId: string, options?: any): AxiosPromise<ApiWallet>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listWallets(options?: any): AxiosPromise<Array<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
     * @summary Create / Restore
     * @param {ApiWalletPostData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postWallet(body: ApiWalletPostData, options?: any): AxiosPromise<ApiWallet>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Metadata
     * @param {ApiWalletPutData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWallet(body: ApiWalletPutData, walletId: string, options?: any): AxiosPromise<ApiWallet>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Passphrase
     * @param {ApiWalletPutPassphraseData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putWalletPassphrase(body: ApiWalletPutPassphraseData, walletId: string, options?: any): AxiosPromise<void>;
};
/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
export declare class WalletsApi extends BaseAPI {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Delete
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    deleteWallet(walletId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
     * @summary UTxO Statistics
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getUTxOsStatistics(walletId: string, options?: any): Promise<import("axios").AxiosResponse<ApiWalletUTxOsStatistics>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Get
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    getWallet(walletId: string, options?: any): Promise<import("axios").AxiosResponse<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    listWallets(options?: any): Promise<import("axios").AxiosResponse<ApiWallet[]>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
     * @summary Create / Restore
     * @param {ApiWalletPostData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    postWallet(body: ApiWalletPostData, options?: any): Promise<import("axios").AxiosResponse<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Metadata
     * @param {ApiWalletPutData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    putWallet(body: ApiWalletPutData, walletId: string, options?: any): Promise<import("axios").AxiosResponse<ApiWallet>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Passphrase
     * @param {ApiWalletPutPassphraseData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    putWalletPassphrase(body: ApiWalletPutPassphraseData, walletId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
}
