"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WalletsApi = exports.WalletsApiFactory = exports.WalletsApiFp = exports.WalletsApiAxiosParamCreator = void 0;
/* tslint:disable */
/* eslint-disable */
/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
var axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
var base_1 = require("../base");
/**
 * WalletsApi - axios parameter creator
 * @export
 */
exports.WalletsApiAxiosParamCreator = function (configuration) {
    var _this = this;
    return {
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Delete
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWallet: function (walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'walletId' is not null or undefined
                    if (walletId === null || walletId === undefined) {
                        throw new base_1.RequiredError('walletId', 'Required parameter walletId was null or undefined when calling deleteWallet.');
                    }
                    localVarPath = "/wallets/{walletId}".replace("{" + 'walletId' + "}", encodeURIComponent(String(walletId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
         * @summary UTxO Statistics
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUTxOsStatistics: function (walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'walletId' is not null or undefined
                    if (walletId === null || walletId === undefined) {
                        throw new base_1.RequiredError('walletId', 'Required parameter walletId was null or undefined when calling getUTxOsStatistics.');
                    }
                    localVarPath = "/wallets/{walletId}/statistics/utxos".replace("{" + 'walletId' + "}", encodeURIComponent(String(walletId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Get
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet: function (walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    // verify required parameter 'walletId' is not null or undefined
                    if (walletId === null || walletId === undefined) {
                        throw new base_1.RequiredError('walletId', 'Required parameter walletId was null or undefined when calling getWallet.');
                    }
                    localVarPath = "/wallets/{walletId}".replace("{" + 'walletId' + "}", encodeURIComponent(String(walletId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWallets: function (options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions;
                return __generator(this, function (_a) {
                    localVarPath = "/wallets";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
         * @summary Create / Restore
         * @param {ApiWalletPostData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWallet: function (body, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling postWallet.');
                    }
                    localVarPath = "/wallets";
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof body !== 'string' ||
                        localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(body !== undefined ? body : {})
                        : body || '';
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Metadata
         * @param {ApiWalletPutData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWallet: function (body, walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling putWallet.');
                    }
                    // verify required parameter 'walletId' is not null or undefined
                    if (walletId === null || walletId === undefined) {
                        throw new base_1.RequiredError('walletId', 'Required parameter walletId was null or undefined when calling putWallet.');
                    }
                    localVarPath = "/wallets/{walletId}".replace("{" + 'walletId' + "}", encodeURIComponent(String(walletId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof body !== 'string' ||
                        localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(body !== undefined ? body : {})
                        : body || '';
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Passphrase
         * @param {ApiWalletPutPassphraseData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWalletPassphrase: function (body, walletId, options) {
            if (options === void 0) { options = {}; }
            return __awaiter(_this, void 0, void 0, function () {
                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, query, key, key, headersFromBaseOptions, needsSerialization;
                return __generator(this, function (_a) {
                    // verify required parameter 'body' is not null or undefined
                    if (body === null || body === undefined) {
                        throw new base_1.RequiredError('body', 'Required parameter body was null or undefined when calling putWalletPassphrase.');
                    }
                    // verify required parameter 'walletId' is not null or undefined
                    if (walletId === null || walletId === undefined) {
                        throw new base_1.RequiredError('walletId', 'Required parameter walletId was null or undefined when calling putWalletPassphrase.');
                    }
                    localVarPath = "/wallets/{walletId}/passphrase".replace("{" + 'walletId' + "}", encodeURIComponent(String(walletId)));
                    localVarUrlObj = new URL(localVarPath, 'https://example.com');
                    if (configuration) {
                        baseOptions = configuration.baseOptions;
                    }
                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);
                    localVarHeaderParameter = {};
                    localVarQueryParameter = {};
                    localVarHeaderParameter['Content-Type'] = 'application/json';
                    query = new URLSearchParams(localVarUrlObj.search);
                    for (key in localVarQueryParameter) {
                        query.set(key, localVarQueryParameter[key]);
                    }
                    for (key in options.query) {
                        query.set(key, options.query[key]);
                    }
                    localVarUrlObj.search = new URLSearchParams(query).toString();
                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
                    needsSerialization = typeof body !== 'string' ||
                        localVarRequestOptions.headers['Content-Type'] === 'application/json';
                    localVarRequestOptions.data = needsSerialization
                        ? JSON.stringify(body !== undefined ? body : {})
                        : body || '';
                    return [2 /*return*/, {
                            url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                            options: localVarRequestOptions
                        }];
                });
            });
        }
    };
};
/**
 * WalletsApi - functional programming interface
 * @export
 */
exports.WalletsApiFp = function (configuration) {
    return {
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Delete
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWallet: function (walletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).deleteWallet(walletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
         * @summary UTxO Statistics
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUTxOsStatistics: function (walletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).getUTxOsStatistics(walletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Get
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet: function (walletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).getWallet(walletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWallets: function (options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).listWallets(options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
         * @summary Create / Restore
         * @param {ApiWalletPostData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWallet: function (body, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).postWallet(body, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Metadata
         * @param {ApiWalletPutData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWallet: function (body, walletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).putWallet(body, walletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Passphrase
         * @param {ApiWalletPutPassphraseData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWalletPassphrase: function (body, walletId, options) {
            return __awaiter(this, void 0, void 0, function () {
                var localVarAxiosArgs;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, exports.WalletsApiAxiosParamCreator(configuration).putWalletPassphrase(body, walletId, options)];
                        case 1:
                            localVarAxiosArgs = _a.sent();
                            return [2 /*return*/, function (axios, basePath) {
                                    if (axios === void 0) { axios = axios_1.default; }
                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }
                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });
                                    return axios.request(axiosRequestArgs);
                                }];
                    }
                });
            });
        }
    };
};
/**
 * WalletsApi - factory interface
 * @export
 */
exports.WalletsApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Delete
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWallet: function (walletId, options) {
            return exports.WalletsApiFp(configuration)
                .deleteWallet(walletId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
         * @summary UTxO Statistics
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUTxOsStatistics: function (walletId, options) {
            return exports.WalletsApiFp(configuration)
                .getUTxOsStatistics(walletId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Get
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWallet: function (walletId, options) {
            return exports.WalletsApiFp(configuration)
                .getWallet(walletId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
         * @summary List
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWallets: function (options) {
            return exports.WalletsApiFp(configuration)
                .listWallets(options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
         * @summary Create / Restore
         * @param {ApiWalletPostData} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postWallet: function (body, options) {
            return exports.WalletsApiFp(configuration)
                .postWallet(body, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Metadata
         * @param {ApiWalletPutData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWallet: function (body, walletId, options) {
            return exports.WalletsApiFp(configuration)
                .putWallet(body, walletId, options)
                .then(function (request) { return request(axios, basePath); });
        },
        /**
         * <p align=\"right\">status: <strong>stable</strong></p>
         * @summary Update Passphrase
         * @param {ApiWalletPutPassphraseData} body
         * @param {string} walletId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putWalletPassphrase: function (body, walletId, options) {
            return exports.WalletsApiFp(configuration)
                .putWalletPassphrase(body, walletId, options)
                .then(function (request) { return request(axios, basePath); });
        }
    };
};
/**
 * WalletsApi - object-oriented interface
 * @export
 * @class WalletsApi
 * @extends {BaseAPI}
 */
var WalletsApi = /** @class */ (function (_super) {
    __extends(WalletsApi, _super);
    function WalletsApi() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Delete
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.deleteWallet = function (walletId, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .deleteWallet(walletId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return the UTxOs distribution across the whole wallet, in the form of a histogram.  ```      │  100 ─      │      │                                 ┌───┐   10 ─                         ┌───┐   │   │                   ┌───┐      │                 ┌───┐   │   │   │   │                   │   │      │                 │   │   │   │   │   │   ┌───┐           │   │    1 ─ ┌───┐           │   │   │   │   │   │   │   │           │   │      │ │   │           │   │   │   │   │   │   │   │           │   │      │ │   │ │       │ │   │ │ │   │ ╷ │   │ ╷ │   │ ╷       ╷ │   │      └─┘   └─│───────│─┘   └─│─┘   └─│─┘   └─│─┘   └─│───────│─┘   └────            10μ₳    100μ₳   1000μ₳   0.1₳    1₳      10₳     100₳ ```
     * @summary UTxO Statistics
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.getUTxOsStatistics = function (walletId, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .getUTxOsStatistics(walletId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Get
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.getWallet = function (walletId, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .getWallet(walletId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known wallets, ordered from oldest to newest.
     * @summary List
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.listWallets = function (options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .listWallets(options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and restore a wallet from a mnemonic sentence or account public key.
     * @summary Create / Restore
     * @param {ApiWalletPostData} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.postWallet = function (body, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .postWallet(body, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Metadata
     * @param {ApiWalletPutData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.putWallet = function (body, walletId, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .putWallet(body, walletId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>
     * @summary Update Passphrase
     * @param {ApiWalletPutPassphraseData} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WalletsApi
     */
    WalletsApi.prototype.putWalletPassphrase = function (body, walletId, options) {
        var _this = this;
        return exports.WalletsApiFp(this.configuration)
            .putWalletPassphrase(body, walletId, options)
            .then(function (request) { return request(_this.axios, _this.basePath); });
    };
    return WalletsApi;
}(base_1.BaseAPI));
exports.WalletsApi = WalletsApi;
//# sourceMappingURL=wallets-api.js.map