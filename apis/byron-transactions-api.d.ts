/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { Body17 } from '../models';
import { Body18 } from '../models';
import { InlineResponse2004 } from '../models';
import { InlineResponse202 } from '../models';
import { InlineResponse2021 } from '../models';
/**
 * ByronTransactionsApi - axios parameter creator
 * @export
 */
export declare const ByronTransactionsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet.
     * @summary Forget
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByronTransaction: (walletId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Get transaction by id.
     * @summary Get
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByronTransaction: (walletId: string, transactionId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  List all incoming and outgoing transactions for the given wallet.
     * @summary List
     * @param {string} walletId
     * @param {string} [start] An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [end] An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [order] An optional sort order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listByronTransactions: (walletId: string, start?: string, end?: string, order?: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and send transaction from the wallet.
     * @summary Create
     * @param {Body18} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransaction: (body: Body18, walletId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Estimate fee for the transaction.
     * @summary Estimate Fee
     * @param {Body17} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransactionFee: (body: Body17, walletId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * ByronTransactionsApi - functional programming interface
 * @export
 */
export declare const ByronTransactionsApiFp: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet.
     * @summary Forget
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByronTransaction(walletId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Get transaction by id.
     * @summary Get
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByronTransaction(walletId: string, transactionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2021>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  List all incoming and outgoing transactions for the given wallet.
     * @summary List
     * @param {string} walletId
     * @param {string} [start] An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [end] An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [order] An optional sort order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listByronTransactions(walletId: string, start?: string, end?: string, order?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2004>>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and send transaction from the wallet.
     * @summary Create
     * @param {Body18} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransaction(body: Body18, walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2021>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Estimate fee for the transaction.
     * @summary Estimate Fee
     * @param {Body17} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransactionFee(body: Body17, walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse202>>;
};
/**
 * ByronTransactionsApi - factory interface
 * @export
 */
export declare const ByronTransactionsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet.
     * @summary Forget
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteByronTransaction(walletId: string, transactionId: string, options?: any): AxiosPromise<void>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Get transaction by id.
     * @summary Get
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getByronTransaction(walletId: string, transactionId: string, options?: any): AxiosPromise<InlineResponse2021>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  List all incoming and outgoing transactions for the given wallet.
     * @summary List
     * @param {string} walletId
     * @param {string} [start] An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [end] An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [order] An optional sort order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listByronTransactions(walletId: string, start?: string, end?: string, order?: string, options?: any): AxiosPromise<Array<InlineResponse2004>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and send transaction from the wallet.
     * @summary Create
     * @param {Body18} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransaction(body: Body18, walletId: string, options?: any): AxiosPromise<InlineResponse2021>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Estimate fee for the transaction.
     * @summary Estimate Fee
     * @param {Body17} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postByronTransactionFee(body: Body17, walletId: string, options?: any): AxiosPromise<InlineResponse202>;
};
/**
 * ByronTransactionsApi - object-oriented interface
 * @export
 * @class ByronTransactionsApi
 * @extends {BaseAPI}
 */
export declare class ByronTransactionsApi extends BaseAPI {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Forget pending Byron transaction. Importantly, a transaction, when sent, cannot be cancelled. One can only request forgetting about it in order to try spending (concurrently) the same UTxO in another transaction. But, the transaction may still show up later in a block and therefore, appear in the wallet.
     * @summary Forget
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ByronTransactionsApi
     */
    deleteByronTransaction(walletId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<void>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Get transaction by id.
     * @summary Get
     * @param {string} walletId
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ByronTransactionsApi
     */
    getByronTransaction(walletId: string, transactionId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2021>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  List all incoming and outgoing transactions for the given wallet.
     * @summary List
     * @param {string} walletId
     * @param {string} [start] An optional start time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [end] An optional end time in ISO 8601 date-and-time format. Basic and extended formats are both accepted. Times can be local (with a timezone offset) or UTC.  If both a start time and an end time are specified, then the start time must not be later than the end time.  Example: &#x60;2008-08-08T08:08:08Z&#x60;
     * @param {string} [order] An optional sort order.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ByronTransactionsApi
     */
    listByronTransactions(walletId: string, start?: string, end?: string, order?: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2004[]>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Create and send transaction from the wallet.
     * @summary Create
     * @param {Body18} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ByronTransactionsApi
     */
    postByronTransaction(body: Body18, walletId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2021>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Estimate fee for the transaction.
     * @summary Estimate Fee
     * @param {Body17} body
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ByronTransactionsApi
     */
    postByronTransactionFee(body: Body17, walletId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse202>>;
}
