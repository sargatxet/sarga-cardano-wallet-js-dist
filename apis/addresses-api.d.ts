/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { ApiAddressData } from '../models';
import { InlineResponse20014 } from '../models';
import { ApiAddress } from '../models';
import { AnyAddress } from '../models';
/**
 * AddressesApi - axios parameter creator
 * @export
 */
export declare const AddressesApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Give useful information about the structure of a given address.
     * @summary Inspect Address
     * @param {string} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inspectAddress: (addressId: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known addresses, ordered from newest to oldest
     * @summary List
     * @param {string} walletId
     * @param {string} [state] An optional filter on the address state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAddresses: (walletId: string, state?: string, options?: any) => Promise<RequestArgs>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Construct any address by specyfying credential for payment or stake.  In Cardano, Addresses are made of three parts:  ``` *---------*---------*-------* | NETWORK | PAYMENT | STAKE | *---------*---------*-------* ```  The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly handled by the server without you having to worry about it. The `PAYMENT` and `STAKE` parts however can be constructed similarly, using either:  - A public key - A script  The script itself is either constructed out of a public key, or one of the three following primitives:  - all - any - some  Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:  ```                                    ┏─────────┓ SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──            │                       ┗─────────┛                     │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │            └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘               ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │                                                    │   ╭───╮    │                                                    └───┤ , ├────┘                                                        ╰───╯ ```
     * @summary Construct Address
     * @param {ApiAddressData} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAnyAddress: (body?: ApiAddressData, options?: any) => Promise<RequestArgs>;
};
/**
 * AddressesApi - functional programming interface
 * @export
 */
export declare const AddressesApiFp: (configuration?: Configuration) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Give useful information about the structure of a given address.
     * @summary Inspect Address
     * @param {string} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inspectAddress(addressId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse20014>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known addresses, ordered from newest to oldest
     * @summary List
     * @param {string} walletId
     * @param {string} [state] An optional filter on the address state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAddresses(walletId: string, state?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ApiAddress>>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Construct any address by specyfying credential for payment or stake.  In Cardano, Addresses are made of three parts:  ``` *---------*---------*-------* | NETWORK | PAYMENT | STAKE | *---------*---------*-------* ```  The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly handled by the server without you having to worry about it. The `PAYMENT` and `STAKE` parts however can be constructed similarly, using either:  - A public key - A script  The script itself is either constructed out of a public key, or one of the three following primitives:  - all - any - some  Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:  ```                                    ┏─────────┓ SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──            │                       ┗─────────┛                     │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │            └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘               ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │                                                    │   ╭───╮    │                                                    └───┤ , ├────┘                                                        ╰───╯ ```
     * @summary Construct Address
     * @param {ApiAddressData} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAnyAddress(body?: ApiAddressData, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AnyAddress>>;
};
/**
 * AddressesApi - factory interface
 * @export
 */
export declare const AddressesApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Give useful information about the structure of a given address.
     * @summary Inspect Address
     * @param {string} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    inspectAddress(addressId: string, options?: any): AxiosPromise<InlineResponse20014>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known addresses, ordered from newest to oldest
     * @summary List
     * @param {string} walletId
     * @param {string} [state] An optional filter on the address state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAddresses(walletId: string, state?: string, options?: any): AxiosPromise<Array<ApiAddress>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Construct any address by specyfying credential for payment or stake.  In Cardano, Addresses are made of three parts:  ``` *---------*---------*-------* | NETWORK | PAYMENT | STAKE | *---------*---------*-------* ```  The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly handled by the server without you having to worry about it. The `PAYMENT` and `STAKE` parts however can be constructed similarly, using either:  - A public key - A script  The script itself is either constructed out of a public key, or one of the three following primitives:  - all - any - some  Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:  ```                                    ┏─────────┓ SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──            │                       ┗─────────┛                     │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │            └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘               ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │                                                    │   ╭───╮    │                                                    └───┤ , ├────┘                                                        ╰───╯ ```
     * @summary Construct Address
     * @param {ApiAddressData} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    postAnyAddress(body?: ApiAddressData, options?: any): AxiosPromise<AnyAddress>;
};
/**
 * AddressesApi - object-oriented interface
 * @export
 * @class AddressesApi
 * @extends {BaseAPI}
 */
export declare class AddressesApi extends BaseAPI {
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Give useful information about the structure of a given address.
     * @summary Inspect Address
     * @param {string} addressId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    inspectAddress(addressId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse20014>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Return a list of known addresses, ordered from newest to oldest
     * @summary List
     * @param {string} walletId
     * @param {string} [state] An optional filter on the address state.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    listAddresses(walletId: string, state?: string, options?: any): Promise<import("axios").AxiosResponse<ApiAddress[]>>;
    /**
     * <p align=\"right\">status: <strong>stable</strong></p>  Construct any address by specyfying credential for payment or stake.  In Cardano, Addresses are made of three parts:  ``` *---------*---------*-------* | NETWORK | PAYMENT | STAKE | *---------*---------*-------* ```  The `NETWORK` part allows for distinguishing addresses between different networks like the mainnet or the testnet. It is implicitly handled by the server without you having to worry about it. The `PAYMENT` and `STAKE` parts however can be constructed similarly, using either:  - A public key - A script  The script itself is either constructed out of a public key, or one of the three following primitives:  - all - any - some  Each of which contains one or more script(s) that can be either keys or primitives, and so on. Schematically:  ```                                    ┏─────────┓ SCRIPT = ──┬───────────────────────┤ pub key ├─────────────────────┬──            │                       ┗─────────┛                     │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭─────╮   ╭────────╮                                 │            ├──┤ ALL ├───┤ SCRIPT ├─┬───────────────────────────────┤            │  ╰─────╯ ^ ╰────────╯ │                               │            │          │   ╭───╮    │                               │            │          └───┤ , ├────┘                               │            │              ╰───╯                                    │            │  ╭──────╮ ╭──────────╮ ┏───┓ ╭──────╮   ╭────────╮    │            └──┤ SOME ├─┤ AT_LEAST ├─┤ n ├─┤ FROM ├───┤ SCRIPT ├─┬──┘               ╰──────╯ ╰──────────╯ ┗───┛ ╰──────╯ ^ ╰────────╯ │                                                    │   ╭───╮    │                                                    └───┤ , ├────┘                                                        ╰───╯ ```
     * @summary Construct Address
     * @param {ApiAddressData} [body]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AddressesApi
     */
    postAnyAddress(body?: ApiAddressData, options?: any): Promise<import("axios").AxiosResponse<AnyAddress>>;
}
