/**
 * Cardano Wallet Backend API
 * <p align=\"right\"><img style=\"position: relative; top: -10em; margin-bottom: -12em;\" width=\"20%\" src=\"https://cardanodocs.com/img/cardano.png\"></img></p>
 *
 * OpenAPI spec version: 2021.3.4
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
import { RequestArgs, BaseAPI } from '../base';
import { InlineResponse2001 } from '../models';
import { InlineResponse2002 } from '../models';
/**
 * AssetsApi - axios parameter creator
 * @export
 */
export declare const AssetsApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Fetch a single asset from its `policy_id` and `asset_name`, with its metadata if any.  The asset must be associated with the wallet.
     * @summary Get Asset
     * @param {string} walletId
     * @param {string} policyId
     * @param {string} assetName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAsset: (walletId: string, policyId: string, assetName: string, options?: any) => Promise<RequestArgs>;
    /**
     * Fetch the the asset from `policy_id` with an empty name.  The asset must be associated with the wallet.
     * @summary Get Asset (empty name)
     * @param {string} walletId
     * @param {string} policyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetDefault: (walletId: string, policyId: string, options?: any) => Promise<RequestArgs>;
    /**
     * List all assets associated with the wallet, and their metadata if known.  An asset is _associated_ with a wallet if it is involved in a transaction of the wallet.
     * @summary List Assets
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAssets: (walletId: string, options?: any) => Promise<RequestArgs>;
};
/**
 * AssetsApi - functional programming interface
 * @export
 */
export declare const AssetsApiFp: (configuration?: Configuration) => {
    /**
     * Fetch a single asset from its `policy_id` and `asset_name`, with its metadata if any.  The asset must be associated with the wallet.
     * @summary Get Asset
     * @param {string} walletId
     * @param {string} policyId
     * @param {string} assetName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAsset(walletId: string, policyId: string, assetName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     * Fetch the the asset from `policy_id` with an empty name.  The asset must be associated with the wallet.
     * @summary Get Asset (empty name)
     * @param {string} walletId
     * @param {string} policyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetDefault(walletId: string, policyId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse2002>>;
    /**
     * List all assets associated with the wallet, and their metadata if known.  An asset is _associated_ with a wallet if it is involved in a transaction of the wallet.
     * @summary List Assets
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAssets(walletId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse2001>>>;
};
/**
 * AssetsApi - factory interface
 * @export
 */
export declare const AssetsApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Fetch a single asset from its `policy_id` and `asset_name`, with its metadata if any.  The asset must be associated with the wallet.
     * @summary Get Asset
     * @param {string} walletId
     * @param {string} policyId
     * @param {string} assetName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAsset(walletId: string, policyId: string, assetName: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * Fetch the the asset from `policy_id` with an empty name.  The asset must be associated with the wallet.
     * @summary Get Asset (empty name)
     * @param {string} walletId
     * @param {string} policyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAssetDefault(walletId: string, policyId: string, options?: any): AxiosPromise<InlineResponse2002>;
    /**
     * List all assets associated with the wallet, and their metadata if known.  An asset is _associated_ with a wallet if it is involved in a transaction of the wallet.
     * @summary List Assets
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    listAssets(walletId: string, options?: any): AxiosPromise<Array<InlineResponse2001>>;
};
/**
 * AssetsApi - object-oriented interface
 * @export
 * @class AssetsApi
 * @extends {BaseAPI}
 */
export declare class AssetsApi extends BaseAPI {
    /**
     * Fetch a single asset from its `policy_id` and `asset_name`, with its metadata if any.  The asset must be associated with the wallet.
     * @summary Get Asset
     * @param {string} walletId
     * @param {string} policyId
     * @param {string} assetName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    getAsset(walletId: string, policyId: string, assetName: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002>>;
    /**
     * Fetch the the asset from `policy_id` with an empty name.  The asset must be associated with the wallet.
     * @summary Get Asset (empty name)
     * @param {string} walletId
     * @param {string} policyId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    getAssetDefault(walletId: string, policyId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2002>>;
    /**
     * List all assets associated with the wallet, and their metadata if known.  An asset is _associated_ with a wallet if it is involved in a transaction of the wallet.
     * @summary List Assets
     * @param {string} walletId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AssetsApi
     */
    listAssets(walletId: string, options?: any): Promise<import("axios").AxiosResponse<InlineResponse2001[]>>;
}
